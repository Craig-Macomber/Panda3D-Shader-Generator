:: lib
: code
// Some Lib 0 //


:: lib
: code
// Some Lib 1 //


:: node
: info
name vertexNormal
: shaderinputs
varying float3 vtx_normal: NORMAL
: outlinks
float3 norm

: code
norm=vtx_normal;

:: node
: info
name exportNormal
: shaderoutputs
float3 l_normal
: inlinks
float3 norm

: code
l_normal=norm;


:: node
: info
name directionalLight
: shaderinputs
uniform float4x4 dlight_dlight_to_model
float3 l_normal
: outlinks
float3 specularLight
float3 diffuseLight

: code
float4x4 mat=(dlight_dlight_to_model);
float NdotL=dot(l_normal,normalize(mat[2].xyz));
// here H is approximate for the whole model, not per pixel or even per vertex!
float NdotH=dot(l_normal,normalize(mat[3].xyz));
float4 l=lit(NdotL , NdotH , 100);
specularLight=mat[1].xyz*l.z*1;
diffuseLight=mat[0].xyz*l.y;

:: node
: info
name redOut
: outlinks
float3 color
: code
color = float3(1,0,0);



:: node
: info
name colorOut
: inlinks
float3 color
: shaderOutputs
float4 o_color: COLOR

: code
o_color = float4(color,1);

:: node
: info
name vertProject

: shaderInputs
uniform float4x4 mat_modelproj
float4 vtx_position : POSITION

: shaderOutputs
float4 l_position : POSITION

: code
l_position = mul(mat_modelproj, vtx_position);