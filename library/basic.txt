:: lib
: code
// Some Example Lib 0 //


:: lib
: code
// Some Example Lib 1 //

:: node
: info
name float4To3
: inlinks
float4 v
: outlinks
float3 outv
: code
outv = v.xyz;


# sample a texture
:: node
: info
name sampleTexure
: inlinks
sampler2D tex
float2 l_texcoord0
: outlinks
float4 color
: code
color = tex2D(tex, l_texcoord0);

# produce specularLight and diffuseLight values from directional light named "dlight"
:: node
: info
name directionalLight
: shaderinputs
uniform float4x4 dlight_dlight_to_model
float3 l_normal : TEXCOORD2
: outlinks
float3 specularLight
float3 diffuseLight
: code
float4x4 mat=(dlight_dlight_to_model);
float NdotL=dot(l_normal,normalize(mat[2].xyz));
// here H is approximate for the whole model, not per pixel or even per vertex!
float NdotH=dot(l_normal,normalize(mat[3].xyz));
float4 l=lit(NdotL , NdotH , 100);
specularLight=mat[1].xyz*l.z*1;
diffuseLight=mat[0].xyz*l.y;

# transform from model to projected space, and ouput as vertex pos
:: node
: info
name vertProject
: shaderInputs
uniform float4x4 mat_modelproj
: inlinks
float4 vtx_position
: outlinks
float4 l_position
: code
l_position = mul(mat_modelproj, vtx_position);

# transform from model to view space
:: node
: info
name viewSpace
: shaderInputs
uniform float4x4 trans_model_to_view
: inlinks
float4 vtx_position
: outlinks
float4 l_vpos
: code
l_vpos=mul(trans_model_to_view, vtx_position);

# Basic exponential fog computation
:: node
: info
name fog
: inlinks
float4 viewPos
float3 color
float3 fogColor
float density
: outlinks
float3 outColor
: code
float f=exp(-density*length(viewPos.xyz));
outColor=lerp(fogColor,color,f);
